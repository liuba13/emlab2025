
import express from 'express';
// import fetch from 'node-fetch';
import Measurement from '../models/Measurement.js';
import Station from '../models/Station.js';

const router = express.Router();

// GET /api/saveecobot/sync - –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –∑ SaveEcoBot API
router.get('/sync', async (req, res) => {
  try {
    console.log('üîÑ Starting SaveEcoBot data sync...');
    
    // –ó–∞–ø–∏—Ç –¥–æ SaveEcoBot API
    const response = await fetch(process.env.SAVEECOBOT_API || 'https://api.saveecobot.com/output.json');
    
    if (!response.ok) {
      throw new Error(`SaveEcoBot API error: ${response.statusText}`);
    }
    
    const saveEcoBotData = await response.json();
    console.log(`üìä Received ${saveEcoBotData.length} stations from SaveEcoBot`);
    
    const results = {
      stations_processed: 0,
      stations_created: 0,
      stations_updated: 0,
      measurements_created: 0,
      errors: []
    };
    
    // –û–±—Ä–æ–±–∫–∞ –∫–æ–∂–Ω–æ—ó —Å—Ç–∞–Ω—Ü—ñ—ó 
    for (const stationData of saveEcoBotData) {
      try {
        results.stations_processed++;
        
        // –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—Ç–∞–Ω—Ü—ñ—ó —É —Ñ–æ—Ä–º–∞—Ç –º–æ–¥–µ–ª—ñ Station
        const stationInfo = {
          station_id: stationData.id,
          city_name: stationData.cityName,
          station_name: stationData.stationName,
          local_name: stationData.localName || '',
          timezone: stationData.timezone,
          location: {
            type: 'Point',
            coordinates: [parseFloat(stationData.longitude), parseFloat(stationData.latitude)]
          },
          platform_name: stationData.platformName,
          measured_parameters: stationData.pollutants.map(p => p.pol)
        };
        
        // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—Ü—ñ—ó –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
        let station = await Station.findOne({ station_id: stationInfo.station_id });
        if (!station) {
          station = new Station(stationInfo); // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó —Å—Ç–∞–Ω—Ü—ñ—ó
          await station.save(); 
          results.stations_created++;
          console.log(`‚úÖ Created station: ${stationInfo.station_id}`);
        } else {
          await Station.findOneAndUpdate( // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ—ó —Å—Ç–∞–Ω—Ü—ñ—ó
            { station_id: stationInfo.station_id },
            { ...stationInfo, 'metadata.updated_at': new Date() },
            { new: true }
          );
          results.stations_updated++;
        }
        
        // –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –≤–∏–º—ñ—Ä—é–≤–∞–Ω—å –ø–æ —á–∞—Å—É
        const measurementGroups = {};
        
        stationData.pollutants.forEach(pollutantData => { // –û–±—Ä–æ–±–∫–∞ –∫–æ–∂–Ω–æ–≥–æ –∑–∞–±—Ä—É–¥–Ω—é–≤–∞—á–∞
          if (pollutantData.time && pollutantData.value !== null && pollutantData.value !== undefined) {
            const timeKey = pollutantData.time; // –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —á–∞—Å—É —è–∫ –∫–ª—é—á–∞ –¥–ª—è –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è
            
            if (!measurementGroups[timeKey]) { // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥—Ä—É–ø–∏ –≤–∏–º—ñ—Ä—é–≤–∞–Ω—å –¥–ª—è –ø–µ–≤–Ω–æ–≥–æ —á–∞—Å—É
              measurementGroups[timeKey] = { 
                measurement_time: new Date(pollutantData.time),
                pollutants: []
              }; 
            }
            
            measurementGroups[timeKey].pollutants.push({ // –î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–±—Ä—É–¥–Ω—é–≤–∞—á–∞ –¥–æ –≥—Ä—É–ø–∏
              pollutant: pollutantData.pol,
              value: pollutantData.value,
              unit: pollutantData.unit,
              averaging_period: pollutantData.averaging,
              quality_flag: 'valid'
            });
          }
        });
        
        // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∏–º—ñ—Ä—é–≤–∞–Ω—å
        for (const [timeKey, measurementGroup] of Object.entries(measurementGroups)) { // –û–±—Ä–æ–±–∫–∞ –∫–æ–∂–Ω–æ—ó –≥—Ä—É–ø–∏ –≤–∏–º—ñ—Ä—é–≤–∞–Ω—å
          // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —ñ—Å–Ω—É—î –≤–∂–µ —Ç–∞–∫–µ –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è
          const existingMeasurement = await Measurement.findOne({
            station_id: stationData.id,
            measurement_time: measurementGroup.measurement_time
          });
          
          if (!existingMeasurement && measurementGroup.pollutants.length > 0) { // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è, —è–∫—â–æ –π–æ–≥–æ —â–µ –Ω–µ–º–∞—î
            const measurement = new Measurement({ // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è
              station_id: stationData.id,
              measurement_time: measurementGroup.measurement_time,
              pollutants: measurementGroup.pollutants,
              metadata: {
                source: 'SaveEcoBot',
                original_data: stationData
              }
            });
            
            await measurement.save(); // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
            results.measurements_created++; // –õ—ñ—á–∏–ª—å–Ω–∏–∫ —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö –≤–∏–º—ñ—Ä—é–≤–∞–Ω—å
          }
        }
        
        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —á–∞—Å—É –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è
        await station.updateLastMeasurement();
        
      } catch (error) { // –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ –¥–ª—è –∫–æ–∂–Ω–æ—ó —Å—Ç–∞–Ω—Ü—ñ—ó
        console.error(`‚ùå Error processing station ${stationData.id}:`, error.message); // –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏
        results.errors.push({ // –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫
          station_id: stationData.id, // –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Å—Ç–∞–Ω—Ü—ñ—ó
          error: error.message // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
        });
      }
    }
    
    console.log('‚úÖ SaveEcoBot sync completed');
    console.log(`üìä Results:`, results);
    
    res.json({ // –í—ñ–¥–ø–æ–≤—ñ–¥—å –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
      success: true,
      message: 'SaveEcoBot data synchronized successfully',
      results
    });
    
  } catch (error) { // –ì–ª–æ–±–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
    console.error('‚ùå SaveEcoBot sync failed:', error);
    res.status(500).json({ 
      success: false,
      error: `Failed to sync with SaveEcoBot: ${error.message}`
    });
  }
});

// GET /api/saveecobot/status - –°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
router.get('/status', async (req, res) => { // –¢–∏–º—á–∞—Å–æ–≤–∏–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
  try {
    const totalStations = await Station.countDocuments(); // –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–∞–Ω—Ü—ñ–π
    const activeStations = await Station.countDocuments({ status: 'active' }); // –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å—Ç–∞–Ω—Ü—ñ–π
    const totalMeasurements = await Measurement.countDocuments(); // –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏–º—ñ—Ä—é–≤–∞–Ω—å
    
    const lastMeasurement = await Measurement.findOne() // –û—Å—Ç–∞–Ω–Ω—î –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è
      .sort({ measurement_time: -1 }) // –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ —á–∞—Å–æ–º –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è —É —Å–ø–∞–¥–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
      .select('measurement_time metadata.source'); // –í–∏–±—ñ—Ä –ø–æ–ª—ñ–≤ measurement_time —Ç–∞ metadata.source
    
    const stationsWithRecentData = await Measurement.aggregate([ // –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–∞–Ω—Ü—ñ–π –∑ –¥–∞–Ω–∏–º–∏ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 24 –≥–æ–¥–∏–Ω–∏
      {
        $match: { // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –≤–∏–º—ñ—Ä—é–≤–∞–Ω—å –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 24 –≥–æ–¥–∏–Ω–∏
          measurement_time: { 
            $gte: new Date(Date.now() - 24 * 60 * 60 * 1000) // –û—Å—Ç–∞–Ω–Ω—ñ 24 –≥–æ–¥–∏–Ω–∏
          }
        }
      },
      {
        $group: { // –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –∑–∞ station_id
          _id: '$station_id'
        }
      },
      {
        $count: 'stations_with_recent_data' // –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Å—Ç–∞–Ω—Ü—ñ–π
      }
    ]);
    
    res.json({ // –í—ñ–¥–ø–æ–≤—ñ–¥—å –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ —Å—Ç–∞—Ç—É—Å
      success: true,
      data: {
        total_stations: totalStations,
        active_stations: activeStations,
        total_measurements: totalMeasurements,
        last_measurement_time: lastMeasurement?.measurement_time,
        last_measurement_source: lastMeasurement?.metadata?.source,
        stations_with_recent_data: stationsWithRecentData[0]?.stations_with_recent_data || 0
      }
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

export default router;


