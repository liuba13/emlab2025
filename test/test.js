const fetch = require("node-fetch");
global.fetch = fetch;

const BASE_URL = "http://localhost:3000";

describe("Eco Monitoring API", () => {
  test("Health endpoint works", async () => {
    const response = await fetch(`${BASE_URL}/health`);
    expect(response.ok).toBe(true);
    const data = await response.json();
    expect(data.status).toBe("healthy");
  });

  test("Stations endpoint returns list", async () => {
    const response = await fetch(`${BASE_URL}/api/stations`);
    expect(response.ok).toBe(true);
    const data = await response.json();
    expect(Array.isArray(data.data)).toBe(true);
  });

  test(
  "SaveEcoBot sync endpoint works",
  async () => {
    const response = await fetch(`${BASE_URL}/api/saveecobot/sync`);
    expect(response.ok).toBe(true);

    const data = await response.json();

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–≤–æ–≥–æ JSON
    expect(data).toHaveProperty("success", true);
    expect(data).toHaveProperty("message", "SaveEcoBot data synchronized successfully");
    expect(data).toHaveProperty("results");
    expect(data.results).toHaveProperty("stations_processed");
    expect(data.results).toHaveProperty("stations_updated");
    expect(data.results).toHaveProperty("measurements_created");

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ —î –º–∞—Å–∏–≤ –ø–æ–º–∏–ª–æ–∫
    expect(Array.isArray(data.results.errors)).toBe(true);
  },
  20000 // 20 —Å–µ–∫—É–Ω–¥ –Ω–∞ —Ç–µ—Å—Ç
);

  test("Latest measurements endpoint returns data", async () => {
    const response = await fetch(`${BASE_URL}/api/measurements/latest`);
    expect(response.ok).toBe(true);
    const data = await response.json();
    expect(Array.isArray(data.data)).toBe(true);
  });
});

// –ö–æ–º–µ–Ω—Ç–∞—Ä—ñ –¥–æ –∫–æ–¥—É:
// –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –±—ñ–±–ª—ñ–æ—Ç–µ–∫—É node-fetch –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è fetch —É Node.js —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ.
// –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω—É –∑–º—ñ–Ω–Ω—É fetch, —â–æ–± –≤–æ–Ω–∞ –±—É–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —É –≤—Å—å–æ–º—É –∫–æ–¥—ñ.
// –í–∏–∑–Ω–∞—á–∞—î–º–æ –±–∞–∑–æ–≤–∏–π URL –¥–ª—è API.
// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ describe –¥–ª—è –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è –ø–æ–≤'—è–∑–∞–Ω–∏—Ö —Ç–µ—Å—Ç—ñ–≤.
// –ö–æ–∂–µ–Ω test –ø–µ—Ä–µ–≤—ñ—Ä—è—î –æ–∫—Ä–µ–º–∏–π –∞—Å–ø–µ–∫—Ç API:
// - –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É –∑–¥–æ—Ä–æ–≤'—è —Å–µ—Ä–≤–µ—Ä–∞ (health endpoint).
// - –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É —Å—Ç–∞–Ω—Ü—ñ–π (stations endpoint).
// - –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–±–æ—Ç–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∑ SaveEcoBot (sync endpoint).
// - –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –≤–∏–º—ñ—Ä—é–≤–∞–Ω—å (latest measurements endpoint).
// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ expect –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∑–∞–ø–∏—Ç—ñ–≤.
// –î–ª—è —Ç–µ—Å—Ç—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∑ SaveEcoBot –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ç–∞–π–º–∞—É—Ç 20 —Å–µ–∫—É–Ω–¥ —á–µ—Ä–µ–∑ –º–æ–∂–ª–∏–≤—É —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ—ó.
// –ó–∞–ø–∏—Ç–∏ –¥–æ API –≤–∏–∫–æ–Ω—É—é—Ç—å—Å—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é fetch, –∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø–µ—Ä–µ–≤—ñ—Ä—è—é—Ç—å—Å—è –Ω–∞ –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å —Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–∏—Ö.


//////////////////////////////

// async function testAPI() {
//   console.log('üß™ Testing Eco Monitoring API...\n');

//   try {
//     // Test 1: Health check
//     console.log('1. Testing health endpoint...');
//     const healthResponse = await fetch(`${BASE_URL}/health`);
//     const healthData = await healthResponse.json();
//     console.log('‚úÖ Health:', healthData.status);

//     // Test 2: Get all stations
//     console.log('\n2. Testing stations endpoint...');
//     const stationsResponse = await fetch(`${BASE_URL}/api/stations`);
//     const stationsData = await stationsResponse.json();
//     console.log(`‚úÖ Stations: ${stationsData.data?.length || 0} found`);

//     // Test 3: Sync with SaveEcoBot
//     console.log('\n3. Testing SaveEcoBot sync...');
//     const syncResponse = await fetch(`${BASE_URL}/api/saveecobot/sync`);
//     const syncData = await syncResponse.json();
//     console.log('‚úÖ Sync results:', syncData.results);

//     // Test 4: Get latest measurements
//     console.log('\n4. Testing latest measurements...');
//     const latestResponse = await fetch(`${BASE_URL}/api/measurements/latest`);
//     const latestData = await latestResponse.json();
//     console.log(`‚úÖ Latest measurements: ${latestData.data?.length || 0} stations`);

//     console.log('\nüéâ All tests completed successfully!');

//   } catch (error) {
//     console.error('‚ùå Test failed:', error.message);
//   }
// }

// testAPI();

